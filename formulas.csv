Formula,Example Code,Description
"pd.DataFrame(data)","pd.DataFrame({'A': [1, 2], 'B': [3, 4]})","Creates a DataFrame from a dictionary, list, or other data source."
"pd.read_csv('file.csv')","pd.read_csv('data.csv')","Reads a CSV file into a DataFrame."
"pd.read_excel('file.xlsx')","pd.read_excel('data.xlsx')","Reads an Excel file into a DataFrame."
"df.head()","df.head()","Displays the first 5 rows of the DataFrame."
"df.tail()","df.tail()","Displays the last 5 rows of the DataFrame."
"df.info()","df.info()","Shows a summary of the DataFrame, including data types and non-null counts."
"df.shape","df.shape","Returns the dimensions (rows, columns) of the DataFrame."
"df.columns","df.columns","Returns the column names of the DataFrame."
"df.dtypes","df.dtypes","Displays the data types of each column."
"df.describe()","df.describe()","Provides descriptive statistics for numerical columns."
"df['col']","df['A']","Selects a single column as a Series."
"df[['col1', 'col2']]","df[['A', 'B']]","Selects multiple columns as a new DataFrame."
"df.iloc[0, 0]","df.iloc[0, 0]","Selects the element at the first row and first column."
"df.loc[0, 'col']","df.loc[0, 'A']","Selects the element at the first row of column 'A'."
"df.iloc[1:4, 0:2]","df.iloc[1:4, 0:2]","Slices rows 1 to 3 and columns 0 to 1."
"df.loc[df['A'] > 2]","df.loc[df['A'] > 2]","Filters rows where column 'A' has values greater than 2."
"df.drop('col', axis=1)","df.drop('A', axis=1)","Drops the column 'A' from the DataFrame."
"df.dropna()","df.dropna()","Removes rows with missing values."
"df.fillna(value)","df.fillna(0)","Replaces missing values with the specified value."
"df.isnull()","df.isnull()","Returns a DataFrame of boolean values indicating where values are null."
"df.notnull()","df.notnull()","Returns a DataFrame of boolean values indicating where values are not null."
"df.rename(columns={'old': 'new'})","df.rename(columns={'A': 'X'})","Renames column 'A' to 'X'."
"df.sort_values('col')","df.sort_values('A')","Sorts the DataFrame by column 'A'."
"df.sort_values(['col1', 'col2'], ascending=[True, False])","df.sort_values(['A', 'B'], ascending=[True, False])","Sorts by multiple columns with specified ascending orders."
"df.groupby('col').mean()","df.groupby('A').mean()","Groups rows by column 'A' and computes the mean for each group."
"df.groupby(['col1', 'col2']).sum()","df.groupby(['A', 'B']).sum()","Groups by multiple columns and computes the sum for each group."
"df['new_col'] = df['col'] * 2","df['C'] = df['A'] * 2","Creates a new column 'C' by doubling the values in column 'A'."
"df['new_col'] = df['col1'] + df['col2']","df['C'] = df['A'] + df['B']","Creates a new column 'C' by adding values from columns 'A' and 'B'."
"df.apply(func)","df.apply(lambda x: x + 1)","Applies a function to each element of the DataFrame."
"df['col'].apply(func)","df['A'].apply(lambda x: x ** 2)","Applies a function to each element in column 'A'."
"df.pivot_table(values='val', index='row', columns='col', aggfunc='mean')","df.pivot_table(values='C', index='A', columns='B', aggfunc='mean')","Creates a pivot table summarizing values 'C' grouped by rows 'A' and columns 'B'."
"df.merge(df2, on='key')","df.merge(df2, on='A')","Merges two DataFrames on column 'A'."
"df.concat([df1, df2])","pd.concat([df1, df2])","Concatenates two DataFrames vertically or horizontally."
"df.to_csv('file.csv')","df.to_csv('output.csv')","Writes the DataFrame to a CSV file."
"df.to_excel('file.xlsx')","df.to_excel('output.xlsx')","Writes the DataFrame to an Excel file."
"df.melt(id_vars=['id'], value_vars=['col'])","df.melt(id_vars=['ID'], value_vars=['A', 'B'])","Converts wide-format DataFrame to long-format."
"pd.pivot(df, index='row', columns='col', values='val')","pd.pivot(df, index='A', columns='B', values='C')","Pivots the DataFrame based on 'A', 'B', and 'C'."
"df.duplicated()","df.duplicated()","Returns a boolean Series indicating duplicate rows."
"df.drop_duplicates()","df.drop_duplicates()","Removes duplicate rows from the DataFrame."
"df.corr()","df.corr()","Computes pairwise correlation of columns."
"df.sample(n=5)","df.sample(n=5)","Samples 5 random rows from the DataFrame."
"df.nunique()","df.nunique()","Returns the number of unique values in each column."
